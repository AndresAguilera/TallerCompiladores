Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    SCOMMENT
    BEGINCOMMENT
    ENDCOMMENT
    MCOMMENT
    POWOP1
    POWOP2

Grammar

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> declarationList declaration
Rule 3     declarationList -> declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> funDeclaration
Rule 6     varDeclaration -> typeSpecifier ID SEMICOLON
Rule 7     varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 8     typeSpecifier -> INT
Rule 9     typeSpecifier -> VOID
Rule 10    funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt
Rule 11    params -> paramList
Rule 12    params -> VOID
Rule 13    paramList -> paramList COMMA param
Rule 14    paramList -> param
Rule 15    param -> typeSpecifier ID
Rule 16    param -> typeSpecifier ID LBRACKET RBRACKET
Rule 17    compoundStmt -> LBRACE localDeclarations statementList RBRACE
Rule 18    localDeclarations -> localDeclarations varDeclaration
Rule 19    localDeclarations -> empty
Rule 20    statementList -> statementList statement
Rule 21    statementList -> empty
Rule 22    statement -> expressionStmt
Rule 23    statement -> compoundStmt
Rule 24    statement -> selectionStmt
Rule 25    statement -> iterationStmt
Rule 26    statement -> returnStmt
Rule 27    expressionStmt -> expression SEMICOLON
Rule 28    expressionStmt -> SEMICOLON
Rule 29    selectionStmt -> IF LPARENT expression RPARENT statement
Rule 30    selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement
Rule 31    iterationStmt -> WHILE LPARENT expression RPARENT statement
Rule 32    returnStmt -> RETURN SEMICOLON
Rule 33    returnStmt -> RETURN expression SEMICOLON
Rule 34    expression -> var ASSIGN expression
Rule 35    expression -> simpleExpression
Rule 36    var -> ID
Rule 37    var -> ID LBRACKET expression RBRACKET
Rule 38    simpleExpression -> additiveExpression relop additiveExpression
Rule 39    simpleExpression -> additiveExpression
Rule 40    relop -> LEQ
Rule 41    relop -> LT
Rule 42    relop -> GT
Rule 43    relop -> GEQ
Rule 44    relop -> EQ
Rule 45    relop -> NEQ
Rule 46    additiveExpression -> additiveExpression addop term
Rule 47    additiveExpression -> term
Rule 48    addop -> PLUS
Rule 49    addop -> MINUS
Rule 50    term -> term mulop factor
Rule 51    term -> factor
Rule 52    mulop -> TIMES
Rule 53    mulop -> DIVIDE
Rule 54    factor -> LPARENT expression RPARENT
Rule 55    factor -> var
Rule 56    factor -> call
Rule 57    factor -> NUMBER
Rule 58    call -> ID LPARENT args RPARENT
Rule 59    args -> argList
Rule 60    args -> empty
Rule 61    argList -> argList COMMA expression
Rule 62    argList -> expression
Rule 63    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 34
BEGINCOMMENT         : 
COMMA                : 13 61
DIVIDE               : 53
ELSE                 : 30
ENDCOMMENT           : 
EQ                   : 44
GEQ                  : 43
GT                   : 42
ID                   : 6 7 10 15 16 36 37 58
IF                   : 29 30
INT                  : 8
LBRACE               : 17
LBRACKET             : 7 16 37
LEQ                  : 40
LPARENT              : 10 29 30 31 54 58
LT                   : 41
MCOMMENT             : 
MINUS                : 49
NEQ                  : 45
NUMBER               : 7 57
PLUS                 : 48
POWOP1               : 
POWOP2               : 
RBRACE               : 17
RBRACKET             : 7 16 37
RETURN               : 32 33
RPARENT              : 10 29 30 31 54 58
SCOMMENT             : 
SEMICOLON            : 6 7 27 28 32 33
TIMES                : 52
VOID                 : 9 12
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 38 38 39 46
addop                : 46
argList              : 59 61
args                 : 58
call                 : 56
compoundStmt         : 10 23
declaration          : 2 3
declarationList      : 1 2
empty                : 19 21 60
expression           : 27 29 30 31 33 34 37 54 61 62
expressionStmt       : 22
factor               : 50 51
funDeclaration       : 5
iterationStmt        : 25
localDeclarations    : 17 18
mulop                : 50
param                : 13 14
paramList            : 11 13
params               : 10
program              : 0
relop                : 38
returnStmt           : 26
selectionStmt        : 24
simpleExpression     : 35
statement            : 20 29 30 30 31
statementList        : 17 20
term                 : 46 47 50
typeSpecifier        : 6 7 10 15 16
var                  : 34 55
varDeclaration       : 4 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . declarationList declaration
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funDeclaration
    (6) varDeclaration -> . typeSpecifier ID SEMICOLON
    (7) varDeclaration -> . typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) funDeclaration -> . typeSpecifier ID LPARENT params RPARENT compoundStmt
    (8) typeSpecifier -> . INT
    (9) typeSpecifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 8

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    declaration                    shift and go to state 3
    varDeclaration                 shift and go to state 4
    funDeclaration                 shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> declarationList .
    (2) declarationList -> declarationList . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . funDeclaration
    (6) varDeclaration -> . typeSpecifier ID SEMICOLON
    (7) varDeclaration -> . typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) funDeclaration -> . typeSpecifier ID LPARENT params RPARENT compoundStmt
    (8) typeSpecifier -> . INT
    (9) typeSpecifier -> . VOID

    $end            reduce using rule 1 (program -> declarationList .)
    INT             shift and go to state 7
    VOID            shift and go to state 8

    declaration                    shift and go to state 9
    varDeclaration                 shift and go to state 4
    funDeclaration                 shift and go to state 5
    typeSpecifier                  shift and go to state 6

state 3

    (3) declarationList -> declaration .

    INT             reduce using rule 3 (declarationList -> declaration .)
    VOID            reduce using rule 3 (declarationList -> declaration .)
    $end            reduce using rule 3 (declarationList -> declaration .)


state 4

    (4) declaration -> varDeclaration .

    INT             reduce using rule 4 (declaration -> varDeclaration .)
    VOID            reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)


state 5

    (5) declaration -> funDeclaration .

    INT             reduce using rule 5 (declaration -> funDeclaration .)
    VOID            reduce using rule 5 (declaration -> funDeclaration .)
    $end            reduce using rule 5 (declaration -> funDeclaration .)


state 6

    (6) varDeclaration -> typeSpecifier . ID SEMICOLON
    (7) varDeclaration -> typeSpecifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (10) funDeclaration -> typeSpecifier . ID LPARENT params RPARENT compoundStmt

    ID              shift and go to state 10


state 7

    (8) typeSpecifier -> INT .

    ID              reduce using rule 8 (typeSpecifier -> INT .)


state 8

    (9) typeSpecifier -> VOID .

    ID              reduce using rule 9 (typeSpecifier -> VOID .)


state 9

    (2) declarationList -> declarationList declaration .

    INT             reduce using rule 2 (declarationList -> declarationList declaration .)
    VOID            reduce using rule 2 (declarationList -> declarationList declaration .)
    $end            reduce using rule 2 (declarationList -> declarationList declaration .)


state 10

    (6) varDeclaration -> typeSpecifier ID . SEMICOLON
    (7) varDeclaration -> typeSpecifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (10) funDeclaration -> typeSpecifier ID . LPARENT params RPARENT compoundStmt

    SEMICOLON       shift and go to state 11
    LBRACKET        shift and go to state 12
    LPARENT         shift and go to state 13


state 11

    (6) varDeclaration -> typeSpecifier ID SEMICOLON .

    INT             reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    VOID            reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    $end            reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    RBRACE          reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    SEMICOLON       reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    LBRACE          reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    IF              reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    ID              reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    LPARENT         reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)
    NUMBER          reduce using rule 6 (varDeclaration -> typeSpecifier ID SEMICOLON .)


state 12

    (7) varDeclaration -> typeSpecifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 14


state 13

    (10) funDeclaration -> typeSpecifier ID LPARENT . params RPARENT compoundStmt
    (11) params -> . paramList
    (12) params -> . VOID
    (13) paramList -> . paramList COMMA param
    (14) paramList -> . param
    (15) param -> . typeSpecifier ID
    (16) param -> . typeSpecifier ID LBRACKET RBRACKET
    (8) typeSpecifier -> . INT
    (9) typeSpecifier -> . VOID

    VOID            shift and go to state 18
    INT             shift and go to state 7

    typeSpecifier                  shift and go to state 15
    params                         shift and go to state 16
    paramList                      shift and go to state 17
    param                          shift and go to state 19

state 14

    (7) varDeclaration -> typeSpecifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 20


state 15

    (15) param -> typeSpecifier . ID
    (16) param -> typeSpecifier . ID LBRACKET RBRACKET

    ID              shift and go to state 21


state 16

    (10) funDeclaration -> typeSpecifier ID LPARENT params . RPARENT compoundStmt

    RPARENT         shift and go to state 22


state 17

    (11) params -> paramList .
    (13) paramList -> paramList . COMMA param

    RPARENT         reduce using rule 11 (params -> paramList .)
    COMMA           shift and go to state 23


state 18

    (12) params -> VOID .
    (9) typeSpecifier -> VOID .

    RPARENT         reduce using rule 12 (params -> VOID .)
    ID              reduce using rule 9 (typeSpecifier -> VOID .)


state 19

    (14) paramList -> param .

    COMMA           reduce using rule 14 (paramList -> param .)
    RPARENT         reduce using rule 14 (paramList -> param .)


state 20

    (7) varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 24


state 21

    (15) param -> typeSpecifier ID .
    (16) param -> typeSpecifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 15 (param -> typeSpecifier ID .)
    RPARENT         reduce using rule 15 (param -> typeSpecifier ID .)
    LBRACKET        shift and go to state 25


state 22

    (10) funDeclaration -> typeSpecifier ID LPARENT params RPARENT . compoundStmt
    (17) compoundStmt -> . LBRACE localDeclarations statementList RBRACE

    LBRACE          shift and go to state 27

    compoundStmt                   shift and go to state 26

state 23

    (13) paramList -> paramList COMMA . param
    (15) param -> . typeSpecifier ID
    (16) param -> . typeSpecifier ID LBRACKET RBRACKET
    (8) typeSpecifier -> . INT
    (9) typeSpecifier -> . VOID

    INT             shift and go to state 7
    VOID            shift and go to state 8

    param                          shift and go to state 28
    typeSpecifier                  shift and go to state 15

state 24

    (7) varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBRACE          reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPARENT         reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 7 (varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 25

    (16) param -> typeSpecifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 29


state 26

    (10) funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt .

    INT             reduce using rule 10 (funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt .)
    VOID            reduce using rule 10 (funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt .)
    $end            reduce using rule 10 (funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt .)


state 27

    (17) compoundStmt -> LBRACE . localDeclarations statementList RBRACE
    (18) localDeclarations -> . localDeclarations varDeclaration
    (19) localDeclarations -> . empty
    (63) empty -> .

    INT             reduce using rule 63 (empty -> .)
    VOID            reduce using rule 63 (empty -> .)
    RBRACE          reduce using rule 63 (empty -> .)
    SEMICOLON       reduce using rule 63 (empty -> .)
    LBRACE          reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    WHILE           reduce using rule 63 (empty -> .)
    RETURN          reduce using rule 63 (empty -> .)
    ID              reduce using rule 63 (empty -> .)
    LPARENT         reduce using rule 63 (empty -> .)
    NUMBER          reduce using rule 63 (empty -> .)

    localDeclarations              shift and go to state 30
    empty                          shift and go to state 31

state 28

    (13) paramList -> paramList COMMA param .

    COMMA           reduce using rule 13 (paramList -> paramList COMMA param .)
    RPARENT         reduce using rule 13 (paramList -> paramList COMMA param .)


state 29

    (16) param -> typeSpecifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 16 (param -> typeSpecifier ID LBRACKET RBRACKET .)
    RPARENT         reduce using rule 16 (param -> typeSpecifier ID LBRACKET RBRACKET .)


state 30

    (17) compoundStmt -> LBRACE localDeclarations . statementList RBRACE
    (18) localDeclarations -> localDeclarations . varDeclaration
    (20) statementList -> . statementList statement
    (21) statementList -> . empty
    (6) varDeclaration -> . typeSpecifier ID SEMICOLON
    (7) varDeclaration -> . typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (63) empty -> .
    (8) typeSpecifier -> . INT
    (9) typeSpecifier -> . VOID

    RBRACE          reduce using rule 63 (empty -> .)
    SEMICOLON       reduce using rule 63 (empty -> .)
    LBRACE          reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    WHILE           reduce using rule 63 (empty -> .)
    RETURN          reduce using rule 63 (empty -> .)
    ID              reduce using rule 63 (empty -> .)
    LPARENT         reduce using rule 63 (empty -> .)
    NUMBER          reduce using rule 63 (empty -> .)
    INT             shift and go to state 7
    VOID            shift and go to state 8

    statementList                  shift and go to state 32
    varDeclaration                 shift and go to state 33
    empty                          shift and go to state 34
    typeSpecifier                  shift and go to state 35

state 31

    (19) localDeclarations -> empty .

    INT             reduce using rule 19 (localDeclarations -> empty .)
    VOID            reduce using rule 19 (localDeclarations -> empty .)
    RBRACE          reduce using rule 19 (localDeclarations -> empty .)
    SEMICOLON       reduce using rule 19 (localDeclarations -> empty .)
    LBRACE          reduce using rule 19 (localDeclarations -> empty .)
    IF              reduce using rule 19 (localDeclarations -> empty .)
    WHILE           reduce using rule 19 (localDeclarations -> empty .)
    RETURN          reduce using rule 19 (localDeclarations -> empty .)
    ID              reduce using rule 19 (localDeclarations -> empty .)
    LPARENT         reduce using rule 19 (localDeclarations -> empty .)
    NUMBER          reduce using rule 19 (localDeclarations -> empty .)


state 32

    (17) compoundStmt -> LBRACE localDeclarations statementList . RBRACE
    (20) statementList -> statementList . statement
    (22) statement -> . expressionStmt
    (23) statement -> . compoundStmt
    (24) statement -> . selectionStmt
    (25) statement -> . iterationStmt
    (26) statement -> . returnStmt
    (27) expressionStmt -> . expression SEMICOLON
    (28) expressionStmt -> . SEMICOLON
    (17) compoundStmt -> . LBRACE localDeclarations statementList RBRACE
    (29) selectionStmt -> . IF LPARENT expression RPARENT statement
    (30) selectionStmt -> . IF LPARENT expression RPARENT statement ELSE statement
    (31) iterationStmt -> . WHILE LPARENT expression RPARENT statement
    (32) returnStmt -> . RETURN SEMICOLON
    (33) returnStmt -> . RETURN expression SEMICOLON
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    RBRACE          shift and go to state 36
    SEMICOLON       shift and go to state 44
    LBRACE          shift and go to state 27
    IF              shift and go to state 45
    WHILE           shift and go to state 47
    RETURN          shift and go to state 48
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    statement                      shift and go to state 37
    expressionStmt                 shift and go to state 38
    compoundStmt                   shift and go to state 39
    selectionStmt                  shift and go to state 40
    iterationStmt                  shift and go to state 41
    returnStmt                     shift and go to state 42
    expression                     shift and go to state 43
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 33

    (18) localDeclarations -> localDeclarations varDeclaration .

    INT             reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    VOID            reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    RBRACE          reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    SEMICOLON       reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    LBRACE          reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    IF              reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    WHILE           reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    RETURN          reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    ID              reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    LPARENT         reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)
    NUMBER          reduce using rule 18 (localDeclarations -> localDeclarations varDeclaration .)


state 34

    (21) statementList -> empty .

    RBRACE          reduce using rule 21 (statementList -> empty .)
    SEMICOLON       reduce using rule 21 (statementList -> empty .)
    LBRACE          reduce using rule 21 (statementList -> empty .)
    IF              reduce using rule 21 (statementList -> empty .)
    WHILE           reduce using rule 21 (statementList -> empty .)
    RETURN          reduce using rule 21 (statementList -> empty .)
    ID              reduce using rule 21 (statementList -> empty .)
    LPARENT         reduce using rule 21 (statementList -> empty .)
    NUMBER          reduce using rule 21 (statementList -> empty .)


state 35

    (6) varDeclaration -> typeSpecifier . ID SEMICOLON
    (7) varDeclaration -> typeSpecifier . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID              shift and go to state 57


state 36

    (17) compoundStmt -> LBRACE localDeclarations statementList RBRACE .

    INT             reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    VOID            reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    $end            reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    RBRACE          reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    SEMICOLON       reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    LBRACE          reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    IF              reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    WHILE           reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    RETURN          reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    ID              reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    LPARENT         reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    NUMBER          reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)
    ELSE            reduce using rule 17 (compoundStmt -> LBRACE localDeclarations statementList RBRACE .)


state 37

    (20) statementList -> statementList statement .

    RBRACE          reduce using rule 20 (statementList -> statementList statement .)
    SEMICOLON       reduce using rule 20 (statementList -> statementList statement .)
    LBRACE          reduce using rule 20 (statementList -> statementList statement .)
    IF              reduce using rule 20 (statementList -> statementList statement .)
    WHILE           reduce using rule 20 (statementList -> statementList statement .)
    RETURN          reduce using rule 20 (statementList -> statementList statement .)
    ID              reduce using rule 20 (statementList -> statementList statement .)
    LPARENT         reduce using rule 20 (statementList -> statementList statement .)
    NUMBER          reduce using rule 20 (statementList -> statementList statement .)


state 38

    (22) statement -> expressionStmt .

    RBRACE          reduce using rule 22 (statement -> expressionStmt .)
    SEMICOLON       reduce using rule 22 (statement -> expressionStmt .)
    LBRACE          reduce using rule 22 (statement -> expressionStmt .)
    IF              reduce using rule 22 (statement -> expressionStmt .)
    WHILE           reduce using rule 22 (statement -> expressionStmt .)
    RETURN          reduce using rule 22 (statement -> expressionStmt .)
    ID              reduce using rule 22 (statement -> expressionStmt .)
    LPARENT         reduce using rule 22 (statement -> expressionStmt .)
    NUMBER          reduce using rule 22 (statement -> expressionStmt .)
    ELSE            reduce using rule 22 (statement -> expressionStmt .)


state 39

    (23) statement -> compoundStmt .

    RBRACE          reduce using rule 23 (statement -> compoundStmt .)
    SEMICOLON       reduce using rule 23 (statement -> compoundStmt .)
    LBRACE          reduce using rule 23 (statement -> compoundStmt .)
    IF              reduce using rule 23 (statement -> compoundStmt .)
    WHILE           reduce using rule 23 (statement -> compoundStmt .)
    RETURN          reduce using rule 23 (statement -> compoundStmt .)
    ID              reduce using rule 23 (statement -> compoundStmt .)
    LPARENT         reduce using rule 23 (statement -> compoundStmt .)
    NUMBER          reduce using rule 23 (statement -> compoundStmt .)
    ELSE            reduce using rule 23 (statement -> compoundStmt .)


state 40

    (24) statement -> selectionStmt .

    RBRACE          reduce using rule 24 (statement -> selectionStmt .)
    SEMICOLON       reduce using rule 24 (statement -> selectionStmt .)
    LBRACE          reduce using rule 24 (statement -> selectionStmt .)
    IF              reduce using rule 24 (statement -> selectionStmt .)
    WHILE           reduce using rule 24 (statement -> selectionStmt .)
    RETURN          reduce using rule 24 (statement -> selectionStmt .)
    ID              reduce using rule 24 (statement -> selectionStmt .)
    LPARENT         reduce using rule 24 (statement -> selectionStmt .)
    NUMBER          reduce using rule 24 (statement -> selectionStmt .)
    ELSE            reduce using rule 24 (statement -> selectionStmt .)


state 41

    (25) statement -> iterationStmt .

    RBRACE          reduce using rule 25 (statement -> iterationStmt .)
    SEMICOLON       reduce using rule 25 (statement -> iterationStmt .)
    LBRACE          reduce using rule 25 (statement -> iterationStmt .)
    IF              reduce using rule 25 (statement -> iterationStmt .)
    WHILE           reduce using rule 25 (statement -> iterationStmt .)
    RETURN          reduce using rule 25 (statement -> iterationStmt .)
    ID              reduce using rule 25 (statement -> iterationStmt .)
    LPARENT         reduce using rule 25 (statement -> iterationStmt .)
    NUMBER          reduce using rule 25 (statement -> iterationStmt .)
    ELSE            reduce using rule 25 (statement -> iterationStmt .)


state 42

    (26) statement -> returnStmt .

    RBRACE          reduce using rule 26 (statement -> returnStmt .)
    SEMICOLON       reduce using rule 26 (statement -> returnStmt .)
    LBRACE          reduce using rule 26 (statement -> returnStmt .)
    IF              reduce using rule 26 (statement -> returnStmt .)
    WHILE           reduce using rule 26 (statement -> returnStmt .)
    RETURN          reduce using rule 26 (statement -> returnStmt .)
    ID              reduce using rule 26 (statement -> returnStmt .)
    LPARENT         reduce using rule 26 (statement -> returnStmt .)
    NUMBER          reduce using rule 26 (statement -> returnStmt .)
    ELSE            reduce using rule 26 (statement -> returnStmt .)


state 43

    (27) expressionStmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 58


state 44

    (28) expressionStmt -> SEMICOLON .

    RBRACE          reduce using rule 28 (expressionStmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expressionStmt -> SEMICOLON .)
    LBRACE          reduce using rule 28 (expressionStmt -> SEMICOLON .)
    IF              reduce using rule 28 (expressionStmt -> SEMICOLON .)
    WHILE           reduce using rule 28 (expressionStmt -> SEMICOLON .)
    RETURN          reduce using rule 28 (expressionStmt -> SEMICOLON .)
    ID              reduce using rule 28 (expressionStmt -> SEMICOLON .)
    LPARENT         reduce using rule 28 (expressionStmt -> SEMICOLON .)
    NUMBER          reduce using rule 28 (expressionStmt -> SEMICOLON .)
    ELSE            reduce using rule 28 (expressionStmt -> SEMICOLON .)


state 45

    (29) selectionStmt -> IF . LPARENT expression RPARENT statement
    (30) selectionStmt -> IF . LPARENT expression RPARENT statement ELSE statement

    LPARENT         shift and go to state 59


state 46

    (54) factor -> LPARENT . expression RPARENT
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 60
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 47

    (31) iterationStmt -> WHILE . LPARENT expression RPARENT statement

    LPARENT         shift and go to state 61


state 48

    (32) returnStmt -> RETURN . SEMICOLON
    (33) returnStmt -> RETURN . expression SEMICOLON
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    SEMICOLON       shift and go to state 62
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 63
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 49

    (34) expression -> var . ASSIGN expression
    (55) factor -> var .

    ASSIGN          shift and go to state 64
    TIMES           reduce using rule 55 (factor -> var .)
    DIVIDE          reduce using rule 55 (factor -> var .)
    LEQ             reduce using rule 55 (factor -> var .)
    LT              reduce using rule 55 (factor -> var .)
    GT              reduce using rule 55 (factor -> var .)
    GEQ             reduce using rule 55 (factor -> var .)
    EQ              reduce using rule 55 (factor -> var .)
    NEQ             reduce using rule 55 (factor -> var .)
    PLUS            reduce using rule 55 (factor -> var .)
    MINUS           reduce using rule 55 (factor -> var .)
    SEMICOLON       reduce using rule 55 (factor -> var .)
    RPARENT         reduce using rule 55 (factor -> var .)
    RBRACKET        reduce using rule 55 (factor -> var .)
    COMMA           reduce using rule 55 (factor -> var .)


state 50

    (35) expression -> simpleExpression .

    SEMICOLON       reduce using rule 35 (expression -> simpleExpression .)
    RPARENT         reduce using rule 35 (expression -> simpleExpression .)
    RBRACKET        reduce using rule 35 (expression -> simpleExpression .)
    COMMA           reduce using rule 35 (expression -> simpleExpression .)


state 51

    (36) var -> ID .
    (37) var -> ID . LBRACKET expression RBRACKET
    (58) call -> ID . LPARENT args RPARENT

    ASSIGN          reduce using rule 36 (var -> ID .)
    TIMES           reduce using rule 36 (var -> ID .)
    DIVIDE          reduce using rule 36 (var -> ID .)
    LEQ             reduce using rule 36 (var -> ID .)
    LT              reduce using rule 36 (var -> ID .)
    GT              reduce using rule 36 (var -> ID .)
    GEQ             reduce using rule 36 (var -> ID .)
    EQ              reduce using rule 36 (var -> ID .)
    NEQ             reduce using rule 36 (var -> ID .)
    PLUS            reduce using rule 36 (var -> ID .)
    MINUS           reduce using rule 36 (var -> ID .)
    SEMICOLON       reduce using rule 36 (var -> ID .)
    RPARENT         reduce using rule 36 (var -> ID .)
    RBRACKET        reduce using rule 36 (var -> ID .)
    COMMA           reduce using rule 36 (var -> ID .)
    LBRACKET        shift and go to state 65
    LPARENT         shift and go to state 66


state 52

    (38) simpleExpression -> additiveExpression . relop additiveExpression
    (39) simpleExpression -> additiveExpression .
    (46) additiveExpression -> additiveExpression . addop term
    (40) relop -> . LEQ
    (41) relop -> . LT
    (42) relop -> . GT
    (43) relop -> . GEQ
    (44) relop -> . EQ
    (45) relop -> . NEQ
    (48) addop -> . PLUS
    (49) addop -> . MINUS

    SEMICOLON       reduce using rule 39 (simpleExpression -> additiveExpression .)
    RPARENT         reduce using rule 39 (simpleExpression -> additiveExpression .)
    RBRACKET        reduce using rule 39 (simpleExpression -> additiveExpression .)
    COMMA           reduce using rule 39 (simpleExpression -> additiveExpression .)
    LEQ             shift and go to state 69
    LT              shift and go to state 70
    GT              shift and go to state 71
    GEQ             shift and go to state 72
    EQ              shift and go to state 73
    NEQ             shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76

    relop                          shift and go to state 67
    addop                          shift and go to state 68

state 53

    (47) additiveExpression -> term .
    (50) term -> term . mulop factor
    (52) mulop -> . TIMES
    (53) mulop -> . DIVIDE

    LEQ             reduce using rule 47 (additiveExpression -> term .)
    LT              reduce using rule 47 (additiveExpression -> term .)
    GT              reduce using rule 47 (additiveExpression -> term .)
    GEQ             reduce using rule 47 (additiveExpression -> term .)
    EQ              reduce using rule 47 (additiveExpression -> term .)
    NEQ             reduce using rule 47 (additiveExpression -> term .)
    PLUS            reduce using rule 47 (additiveExpression -> term .)
    MINUS           reduce using rule 47 (additiveExpression -> term .)
    SEMICOLON       reduce using rule 47 (additiveExpression -> term .)
    RPARENT         reduce using rule 47 (additiveExpression -> term .)
    RBRACKET        reduce using rule 47 (additiveExpression -> term .)
    COMMA           reduce using rule 47 (additiveExpression -> term .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79

    mulop                          shift and go to state 77

state 54

    (51) term -> factor .

    TIMES           reduce using rule 51 (term -> factor .)
    DIVIDE          reduce using rule 51 (term -> factor .)
    LEQ             reduce using rule 51 (term -> factor .)
    LT              reduce using rule 51 (term -> factor .)
    GT              reduce using rule 51 (term -> factor .)
    GEQ             reduce using rule 51 (term -> factor .)
    EQ              reduce using rule 51 (term -> factor .)
    NEQ             reduce using rule 51 (term -> factor .)
    PLUS            reduce using rule 51 (term -> factor .)
    MINUS           reduce using rule 51 (term -> factor .)
    SEMICOLON       reduce using rule 51 (term -> factor .)
    RPARENT         reduce using rule 51 (term -> factor .)
    RBRACKET        reduce using rule 51 (term -> factor .)
    COMMA           reduce using rule 51 (term -> factor .)


state 55

    (56) factor -> call .

    TIMES           reduce using rule 56 (factor -> call .)
    DIVIDE          reduce using rule 56 (factor -> call .)
    LEQ             reduce using rule 56 (factor -> call .)
    LT              reduce using rule 56 (factor -> call .)
    GT              reduce using rule 56 (factor -> call .)
    GEQ             reduce using rule 56 (factor -> call .)
    EQ              reduce using rule 56 (factor -> call .)
    NEQ             reduce using rule 56 (factor -> call .)
    PLUS            reduce using rule 56 (factor -> call .)
    MINUS           reduce using rule 56 (factor -> call .)
    SEMICOLON       reduce using rule 56 (factor -> call .)
    RPARENT         reduce using rule 56 (factor -> call .)
    RBRACKET        reduce using rule 56 (factor -> call .)
    COMMA           reduce using rule 56 (factor -> call .)


state 56

    (57) factor -> NUMBER .

    TIMES           reduce using rule 57 (factor -> NUMBER .)
    DIVIDE          reduce using rule 57 (factor -> NUMBER .)
    LEQ             reduce using rule 57 (factor -> NUMBER .)
    LT              reduce using rule 57 (factor -> NUMBER .)
    GT              reduce using rule 57 (factor -> NUMBER .)
    GEQ             reduce using rule 57 (factor -> NUMBER .)
    EQ              reduce using rule 57 (factor -> NUMBER .)
    NEQ             reduce using rule 57 (factor -> NUMBER .)
    PLUS            reduce using rule 57 (factor -> NUMBER .)
    MINUS           reduce using rule 57 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 57 (factor -> NUMBER .)
    RPARENT         reduce using rule 57 (factor -> NUMBER .)
    RBRACKET        reduce using rule 57 (factor -> NUMBER .)
    COMMA           reduce using rule 57 (factor -> NUMBER .)


state 57

    (6) varDeclaration -> typeSpecifier ID . SEMICOLON
    (7) varDeclaration -> typeSpecifier ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 11
    LBRACKET        shift and go to state 12


state 58

    (27) expressionStmt -> expression SEMICOLON .

    RBRACE          reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    LBRACE          reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    IF              reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    WHILE           reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    RETURN          reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    ID              reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    LPARENT         reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 27 (expressionStmt -> expression SEMICOLON .)
    ELSE            reduce using rule 27 (expressionStmt -> expression SEMICOLON .)


state 59

    (29) selectionStmt -> IF LPARENT . expression RPARENT statement
    (30) selectionStmt -> IF LPARENT . expression RPARENT statement ELSE statement
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 80
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 60

    (54) factor -> LPARENT expression . RPARENT

    RPARENT         shift and go to state 81


state 61

    (31) iterationStmt -> WHILE LPARENT . expression RPARENT statement
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 82
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 62

    (32) returnStmt -> RETURN SEMICOLON .

    RBRACE          reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    IF              reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    ID              reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    LPARENT         reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 32 (returnStmt -> RETURN SEMICOLON .)


state 63

    (33) returnStmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 83


state 64

    (34) expression -> var ASSIGN . expression
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    var                            shift and go to state 49
    expression                     shift and go to state 84
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 65

    (37) var -> ID LBRACKET . expression RBRACKET
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 85
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 66

    (58) call -> ID LPARENT . args RPARENT
    (59) args -> . argList
    (60) args -> . empty
    (61) argList -> . argList COMMA expression
    (62) argList -> . expression
    (63) empty -> .
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    RPARENT         reduce using rule 63 (empty -> .)
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    args                           shift and go to state 86
    argList                        shift and go to state 87
    empty                          shift and go to state 88
    expression                     shift and go to state 89
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 67

    (38) simpleExpression -> additiveExpression relop . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (58) call -> . ID LPARENT args RPARENT

    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56
    ID              shift and go to state 51

    additiveExpression             shift and go to state 90
    term                           shift and go to state 53
    factor                         shift and go to state 54
    var                            shift and go to state 91
    call                           shift and go to state 55

state 68

    (46) additiveExpression -> additiveExpression addop . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (58) call -> . ID LPARENT args RPARENT

    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56
    ID              shift and go to state 51

    term                           shift and go to state 92
    factor                         shift and go to state 54
    var                            shift and go to state 91
    call                           shift and go to state 55

state 69

    (40) relop -> LEQ .

    LPARENT         reduce using rule 40 (relop -> LEQ .)
    NUMBER          reduce using rule 40 (relop -> LEQ .)
    ID              reduce using rule 40 (relop -> LEQ .)


state 70

    (41) relop -> LT .

    LPARENT         reduce using rule 41 (relop -> LT .)
    NUMBER          reduce using rule 41 (relop -> LT .)
    ID              reduce using rule 41 (relop -> LT .)


state 71

    (42) relop -> GT .

    LPARENT         reduce using rule 42 (relop -> GT .)
    NUMBER          reduce using rule 42 (relop -> GT .)
    ID              reduce using rule 42 (relop -> GT .)


state 72

    (43) relop -> GEQ .

    LPARENT         reduce using rule 43 (relop -> GEQ .)
    NUMBER          reduce using rule 43 (relop -> GEQ .)
    ID              reduce using rule 43 (relop -> GEQ .)


state 73

    (44) relop -> EQ .

    LPARENT         reduce using rule 44 (relop -> EQ .)
    NUMBER          reduce using rule 44 (relop -> EQ .)
    ID              reduce using rule 44 (relop -> EQ .)


state 74

    (45) relop -> NEQ .

    LPARENT         reduce using rule 45 (relop -> NEQ .)
    NUMBER          reduce using rule 45 (relop -> NEQ .)
    ID              reduce using rule 45 (relop -> NEQ .)


state 75

    (48) addop -> PLUS .

    LPARENT         reduce using rule 48 (addop -> PLUS .)
    NUMBER          reduce using rule 48 (addop -> PLUS .)
    ID              reduce using rule 48 (addop -> PLUS .)


state 76

    (49) addop -> MINUS .

    LPARENT         reduce using rule 49 (addop -> MINUS .)
    NUMBER          reduce using rule 49 (addop -> MINUS .)
    ID              reduce using rule 49 (addop -> MINUS .)


state 77

    (50) term -> term mulop . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (58) call -> . ID LPARENT args RPARENT

    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56
    ID              shift and go to state 51

    factor                         shift and go to state 93
    var                            shift and go to state 91
    call                           shift and go to state 55

state 78

    (52) mulop -> TIMES .

    LPARENT         reduce using rule 52 (mulop -> TIMES .)
    NUMBER          reduce using rule 52 (mulop -> TIMES .)
    ID              reduce using rule 52 (mulop -> TIMES .)


state 79

    (53) mulop -> DIVIDE .

    LPARENT         reduce using rule 53 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 53 (mulop -> DIVIDE .)
    ID              reduce using rule 53 (mulop -> DIVIDE .)


state 80

    (29) selectionStmt -> IF LPARENT expression . RPARENT statement
    (30) selectionStmt -> IF LPARENT expression . RPARENT statement ELSE statement

    RPARENT         shift and go to state 94


state 81

    (54) factor -> LPARENT expression RPARENT .

    TIMES           reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    DIVIDE          reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    LEQ             reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    LT              reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    GT              reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    GEQ             reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    EQ              reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    NEQ             reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    PLUS            reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    MINUS           reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    SEMICOLON       reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    RPARENT         reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    RBRACKET        reduce using rule 54 (factor -> LPARENT expression RPARENT .)
    COMMA           reduce using rule 54 (factor -> LPARENT expression RPARENT .)


state 82

    (31) iterationStmt -> WHILE LPARENT expression . RPARENT statement

    RPARENT         shift and go to state 95


state 83

    (33) returnStmt -> RETURN expression SEMICOLON .

    RBRACE          reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    LPARENT         reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 33 (returnStmt -> RETURN expression SEMICOLON .)


state 84

    (34) expression -> var ASSIGN expression .

    SEMICOLON       reduce using rule 34 (expression -> var ASSIGN expression .)
    RPARENT         reduce using rule 34 (expression -> var ASSIGN expression .)
    RBRACKET        reduce using rule 34 (expression -> var ASSIGN expression .)
    COMMA           reduce using rule 34 (expression -> var ASSIGN expression .)


state 85

    (37) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 96


state 86

    (58) call -> ID LPARENT args . RPARENT

    RPARENT         shift and go to state 97


state 87

    (59) args -> argList .
    (61) argList -> argList . COMMA expression

    RPARENT         reduce using rule 59 (args -> argList .)
    COMMA           shift and go to state 98


state 88

    (60) args -> empty .

    RPARENT         reduce using rule 60 (args -> empty .)


state 89

    (62) argList -> expression .

    COMMA           reduce using rule 62 (argList -> expression .)
    RPARENT         reduce using rule 62 (argList -> expression .)


state 90

    (38) simpleExpression -> additiveExpression relop additiveExpression .
    (46) additiveExpression -> additiveExpression . addop term
    (48) addop -> . PLUS
    (49) addop -> . MINUS

    SEMICOLON       reduce using rule 38 (simpleExpression -> additiveExpression relop additiveExpression .)
    RPARENT         reduce using rule 38 (simpleExpression -> additiveExpression relop additiveExpression .)
    RBRACKET        reduce using rule 38 (simpleExpression -> additiveExpression relop additiveExpression .)
    COMMA           reduce using rule 38 (simpleExpression -> additiveExpression relop additiveExpression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76

    addop                          shift and go to state 68

state 91

    (55) factor -> var .

    TIMES           reduce using rule 55 (factor -> var .)
    DIVIDE          reduce using rule 55 (factor -> var .)
    PLUS            reduce using rule 55 (factor -> var .)
    MINUS           reduce using rule 55 (factor -> var .)
    SEMICOLON       reduce using rule 55 (factor -> var .)
    RPARENT         reduce using rule 55 (factor -> var .)
    RBRACKET        reduce using rule 55 (factor -> var .)
    COMMA           reduce using rule 55 (factor -> var .)
    LEQ             reduce using rule 55 (factor -> var .)
    LT              reduce using rule 55 (factor -> var .)
    GT              reduce using rule 55 (factor -> var .)
    GEQ             reduce using rule 55 (factor -> var .)
    EQ              reduce using rule 55 (factor -> var .)
    NEQ             reduce using rule 55 (factor -> var .)


state 92

    (46) additiveExpression -> additiveExpression addop term .
    (50) term -> term . mulop factor
    (52) mulop -> . TIMES
    (53) mulop -> . DIVIDE

    LEQ             reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    LT              reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    GT              reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    GEQ             reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    EQ              reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    NEQ             reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    PLUS            reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    MINUS           reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    SEMICOLON       reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    RPARENT         reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    RBRACKET        reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    COMMA           reduce using rule 46 (additiveExpression -> additiveExpression addop term .)
    TIMES           shift and go to state 78
    DIVIDE          shift and go to state 79

    mulop                          shift and go to state 77

state 93

    (50) term -> term mulop factor .

    TIMES           reduce using rule 50 (term -> term mulop factor .)
    DIVIDE          reduce using rule 50 (term -> term mulop factor .)
    LEQ             reduce using rule 50 (term -> term mulop factor .)
    LT              reduce using rule 50 (term -> term mulop factor .)
    GT              reduce using rule 50 (term -> term mulop factor .)
    GEQ             reduce using rule 50 (term -> term mulop factor .)
    EQ              reduce using rule 50 (term -> term mulop factor .)
    NEQ             reduce using rule 50 (term -> term mulop factor .)
    PLUS            reduce using rule 50 (term -> term mulop factor .)
    MINUS           reduce using rule 50 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 50 (term -> term mulop factor .)
    RPARENT         reduce using rule 50 (term -> term mulop factor .)
    RBRACKET        reduce using rule 50 (term -> term mulop factor .)
    COMMA           reduce using rule 50 (term -> term mulop factor .)


state 94

    (29) selectionStmt -> IF LPARENT expression RPARENT . statement
    (30) selectionStmt -> IF LPARENT expression RPARENT . statement ELSE statement
    (22) statement -> . expressionStmt
    (23) statement -> . compoundStmt
    (24) statement -> . selectionStmt
    (25) statement -> . iterationStmt
    (26) statement -> . returnStmt
    (27) expressionStmt -> . expression SEMICOLON
    (28) expressionStmt -> . SEMICOLON
    (17) compoundStmt -> . LBRACE localDeclarations statementList RBRACE
    (29) selectionStmt -> . IF LPARENT expression RPARENT statement
    (30) selectionStmt -> . IF LPARENT expression RPARENT statement ELSE statement
    (31) iterationStmt -> . WHILE LPARENT expression RPARENT statement
    (32) returnStmt -> . RETURN SEMICOLON
    (33) returnStmt -> . RETURN expression SEMICOLON
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    SEMICOLON       shift and go to state 44
    LBRACE          shift and go to state 27
    IF              shift and go to state 45
    WHILE           shift and go to state 47
    RETURN          shift and go to state 48
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 43
    statement                      shift and go to state 99
    expressionStmt                 shift and go to state 38
    compoundStmt                   shift and go to state 39
    selectionStmt                  shift and go to state 40
    iterationStmt                  shift and go to state 41
    returnStmt                     shift and go to state 42
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 95

    (31) iterationStmt -> WHILE LPARENT expression RPARENT . statement
    (22) statement -> . expressionStmt
    (23) statement -> . compoundStmt
    (24) statement -> . selectionStmt
    (25) statement -> . iterationStmt
    (26) statement -> . returnStmt
    (27) expressionStmt -> . expression SEMICOLON
    (28) expressionStmt -> . SEMICOLON
    (17) compoundStmt -> . LBRACE localDeclarations statementList RBRACE
    (29) selectionStmt -> . IF LPARENT expression RPARENT statement
    (30) selectionStmt -> . IF LPARENT expression RPARENT statement ELSE statement
    (31) iterationStmt -> . WHILE LPARENT expression RPARENT statement
    (32) returnStmt -> . RETURN SEMICOLON
    (33) returnStmt -> . RETURN expression SEMICOLON
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    SEMICOLON       shift and go to state 44
    LBRACE          shift and go to state 27
    IF              shift and go to state 45
    WHILE           shift and go to state 47
    RETURN          shift and go to state 48
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 43
    statement                      shift and go to state 100
    expressionStmt                 shift and go to state 38
    compoundStmt                   shift and go to state 39
    selectionStmt                  shift and go to state 40
    iterationStmt                  shift and go to state 41
    returnStmt                     shift and go to state 42
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 96

    (37) var -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    LT              reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    GT              reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    EQ              reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    RPARENT         reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 37 (var -> ID LBRACKET expression RBRACKET .)


state 97

    (58) call -> ID LPARENT args RPARENT .

    TIMES           reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    DIVIDE          reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    LEQ             reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    LT              reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    GT              reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    GEQ             reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    EQ              reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    NEQ             reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    PLUS            reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    MINUS           reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    SEMICOLON       reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    RPARENT         reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    RBRACKET        reduce using rule 58 (call -> ID LPARENT args RPARENT .)
    COMMA           reduce using rule 58 (call -> ID LPARENT args RPARENT .)


state 98

    (61) argList -> argList COMMA . expression
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 101
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 99

    (29) selectionStmt -> IF LPARENT expression RPARENT statement .
    (30) selectionStmt -> IF LPARENT expression RPARENT statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    SEMICOLON       reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    LBRACE          reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    IF              reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    WHILE           reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    RETURN          reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    ID              reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    LPARENT         reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    NUMBER          reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .)
    ELSE            shift and go to state 102

  ! ELSE            [ reduce using rule 29 (selectionStmt -> IF LPARENT expression RPARENT statement .) ]


state 100

    (31) iterationStmt -> WHILE LPARENT expression RPARENT statement .

    RBRACE          reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    SEMICOLON       reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    LBRACE          reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    IF              reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    WHILE           reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    RETURN          reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    ID              reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    LPARENT         reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    NUMBER          reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)
    ELSE            reduce using rule 31 (iterationStmt -> WHILE LPARENT expression RPARENT statement .)


state 101

    (61) argList -> argList COMMA expression .

    COMMA           reduce using rule 61 (argList -> argList COMMA expression .)
    RPARENT         reduce using rule 61 (argList -> argList COMMA expression .)


state 102

    (30) selectionStmt -> IF LPARENT expression RPARENT statement ELSE . statement
    (22) statement -> . expressionStmt
    (23) statement -> . compoundStmt
    (24) statement -> . selectionStmt
    (25) statement -> . iterationStmt
    (26) statement -> . returnStmt
    (27) expressionStmt -> . expression SEMICOLON
    (28) expressionStmt -> . SEMICOLON
    (17) compoundStmt -> . LBRACE localDeclarations statementList RBRACE
    (29) selectionStmt -> . IF LPARENT expression RPARENT statement
    (30) selectionStmt -> . IF LPARENT expression RPARENT statement ELSE statement
    (31) iterationStmt -> . WHILE LPARENT expression RPARENT statement
    (32) returnStmt -> . RETURN SEMICOLON
    (33) returnStmt -> . RETURN expression SEMICOLON
    (34) expression -> . var ASSIGN expression
    (35) expression -> . simpleExpression
    (36) var -> . ID
    (37) var -> . ID LBRACKET expression RBRACKET
    (38) simpleExpression -> . additiveExpression relop additiveExpression
    (39) simpleExpression -> . additiveExpression
    (46) additiveExpression -> . additiveExpression addop term
    (47) additiveExpression -> . term
    (50) term -> . term mulop factor
    (51) term -> . factor
    (54) factor -> . LPARENT expression RPARENT
    (55) factor -> . var
    (56) factor -> . call
    (57) factor -> . NUMBER
    (58) call -> . ID LPARENT args RPARENT

    SEMICOLON       shift and go to state 44
    LBRACE          shift and go to state 27
    IF              shift and go to state 45
    WHILE           shift and go to state 47
    RETURN          shift and go to state 48
    ID              shift and go to state 51
    LPARENT         shift and go to state 46
    NUMBER          shift and go to state 56

    expression                     shift and go to state 43
    statement                      shift and go to state 103
    expressionStmt                 shift and go to state 38
    compoundStmt                   shift and go to state 39
    selectionStmt                  shift and go to state 40
    iterationStmt                  shift and go to state 41
    returnStmt                     shift and go to state 42
    var                            shift and go to state 49
    simpleExpression               shift and go to state 50
    additiveExpression             shift and go to state 52
    term                           shift and go to state 53
    factor                         shift and go to state 54
    call                           shift and go to state 55

state 103

    (30) selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .

    RBRACE          reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    SEMICOLON       reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    LBRACE          reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    IF              reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    WHILE           reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    RETURN          reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    ID              reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    LPARENT         reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    NUMBER          reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)
    ELSE            reduce using rule 30 (selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 99 resolved as shift
