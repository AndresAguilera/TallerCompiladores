
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS MINUS TIMES DIVIDE LT LEQ GT GEQ EQ NEQ LPARENT RPARENT LBRACKET RBRACKET LBRACE RBRACE SCOMMENT BEGINCOMMENT ENDCOMMENT MCOMMENT POWOP1 POWOP2 SEMICOLON COMMA ID ASSIGN NUMBER ELSE IF INT VOID RETURN WHILEprogram : declarationListdeclarationList : declarationList declarationdeclarationList : declarationdeclaration : varDeclarationdeclaration : funDeclarationvarDeclaration : typeSpecifier ID SEMICOLONvarDeclaration : typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLONtypeSpecifier : INTtypeSpecifier : VOIDfunDeclaration : typeSpecifier ID LPARENT params RPARENT compoundStmtparams : paramListparams : VOIDparamList : paramList COMMA paramparamList : paramparam : typeSpecifier IDparam : typeSpecifier ID LBRACKET RBRACKET compoundStmt : LBRACE localDeclarations statementList RBRACElocalDeclarations : localDeclarations varDeclarationlocalDeclarations : emptystatementList : statementList statementstatementList : emptystatement : expressionStmtstatement : compoundStmtstatement : selectionStmtstatement : iterationStmtstatement : returnStmtexpressionStmt : expression SEMICOLON expressionStmt :  SEMICOLON selectionStmt : IF LPARENT expression RPARENT statementselectionStmt : IF LPARENT expression RPARENT statement ELSE statementiterationStmt : WHILE LPARENT expression RPARENT statementreturnStmt : RETURN SEMICOLONreturnStmt : RETURN expression SEMICOLONexpression : var ASSIGN expressionexpression : simpleExpressionvar : IDvar : ID LBRACKET expression RBRACKETsimpleExpression : additiveExpression relop additiveExpressionsimpleExpression : additiveExpressionrelop : LEQrelop : LTrelop : GTrelop : GEQrelop : EQ relop : NEQadditiveExpression : additiveExpression addop termadditiveExpression : termaddop : PLUSaddop : MINUSterm : term mulop factorterm : factormulop : TIMESmulop : DIVIDEfactor : LPARENT expression RPARENTfactor : varfactor : callfactor : NUMBERcall : ID LPARENT args RPARENTargs : argListargs : emptyargList : argList COMMA expressionargList : expressionempty : '
    
_lr_action_items = {'INT':([0,2,3,4,5,9,11,13,23,24,26,27,30,31,33,36,],[7,7,-3,-4,-5,-2,-6,7,7,-7,-10,-63,7,-19,-18,-17,]),'VOID':([0,2,3,4,5,9,11,13,23,24,26,27,30,31,33,36,],[8,8,-3,-4,-5,-2,-6,18,8,-7,-10,-63,8,-19,-18,-17,]),'$end':([1,2,3,4,5,9,11,24,26,36,],[0,-1,-3,-4,-5,-2,-6,-7,-10,-17,]),'ID':([6,7,8,11,15,18,24,27,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,48,58,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,94,95,98,99,100,102,103,],[10,-8,-9,-6,21,-9,-7,-63,-63,-19,51,-18,-21,57,-17,-20,-22,-23,-24,-25,-26,-28,51,51,-27,51,51,-32,51,51,51,51,51,-40,-41,-42,-43,-44,-45,-48,-49,51,-52,-53,-33,51,51,51,-29,-31,51,-30,]),'SEMICOLON':([10,11,20,24,27,30,31,32,33,34,36,37,38,39,40,41,42,43,44,48,49,50,51,52,53,54,55,56,57,58,62,63,81,83,84,90,91,92,93,94,95,96,97,99,100,102,103,],[11,-6,24,-7,-63,-63,-19,44,-18,-21,-17,-20,-22,-23,-24,-25,-26,58,-28,62,-55,-35,-36,-39,-47,-51,-56,-57,11,-27,-32,83,-54,-33,-34,-38,-55,-46,-50,44,44,-37,-58,-29,-31,44,-30,]),'LBRACKET':([10,21,51,57,],[12,25,65,12,]),'LPARENT':([10,11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,45,46,47,48,51,58,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,94,95,98,99,100,102,103,],[13,-6,-7,-63,-63,-19,46,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,59,46,61,46,66,-27,46,46,-32,46,46,46,46,46,-40,-41,-42,-43,-44,-45,-48,-49,46,-52,-53,-33,46,46,46,-29,-31,46,-30,]),'RBRACE':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,62,83,99,100,103,],[-6,-7,-63,-63,-19,36,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,-29,-31,-30,]),'LBRACE':([11,22,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,62,83,94,95,99,100,102,103,],[-6,27,-7,-63,-63,-19,27,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,27,27,-29,-31,27,-30,]),'IF':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,62,83,94,95,99,100,102,103,],[-6,-7,-63,-63,-19,45,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,45,45,-29,-31,45,-30,]),'WHILE':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,62,83,94,95,99,100,102,103,],[-6,-7,-63,-63,-19,47,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,47,47,-29,-31,47,-30,]),'RETURN':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,62,83,94,95,99,100,102,103,],[-6,-7,-63,-63,-19,48,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,-27,-32,-33,48,48,-29,-31,48,-30,]),'NUMBER':([11,12,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,46,48,58,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,94,95,98,99,100,102,103,],[-6,14,-7,-63,-63,-19,56,-18,-21,-17,-20,-22,-23,-24,-25,-26,-28,56,56,-27,56,56,-32,56,56,56,56,56,-40,-41,-42,-43,-44,-45,-48,-49,56,-52,-53,-33,56,56,56,-29,-31,56,-30,]),'RBRACKET':([14,25,49,50,51,52,53,54,55,56,81,84,85,90,91,92,93,96,97,],[20,29,-55,-35,-36,-39,-47,-51,-56,-57,-54,-34,96,-38,-55,-46,-50,-37,-58,]),'RPARENT':([16,17,18,19,21,28,29,49,50,51,52,53,54,55,56,60,66,80,81,82,84,86,87,88,89,90,91,92,93,96,97,101,],[22,-11,-12,-14,-15,-13,-16,-55,-35,-36,-39,-47,-51,-56,-57,81,-63,94,-54,95,-34,97,-59,-60,-62,-38,-55,-46,-50,-37,-58,-61,]),'COMMA':([17,19,21,28,29,49,50,51,52,53,54,55,56,81,84,87,89,90,91,92,93,96,97,101,],[23,-14,-15,-13,-16,-55,-35,-36,-39,-47,-51,-56,-57,-54,-34,98,-62,-38,-55,-46,-50,-37,-58,-61,]),'ELSE':([36,38,39,40,41,42,44,58,62,83,99,100,103,],[-17,-22,-23,-24,-25,-26,-28,-27,-32,-33,102,-31,-30,]),'ASSIGN':([49,51,96,],[64,-36,-37,]),'TIMES':([49,51,53,54,55,56,81,91,92,93,96,97,],[-55,-36,78,-51,-56,-57,-54,-55,78,-50,-37,-58,]),'DIVIDE':([49,51,53,54,55,56,81,91,92,93,96,97,],[-55,-36,79,-51,-56,-57,-54,-55,79,-50,-37,-58,]),'LEQ':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,69,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'LT':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,70,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'GT':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,71,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'GEQ':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,72,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'EQ':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,73,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'NEQ':([49,51,52,53,54,55,56,81,91,92,93,96,97,],[-55,-36,74,-47,-51,-56,-57,-54,-55,-46,-50,-37,-58,]),'PLUS':([49,51,52,53,54,55,56,81,90,91,92,93,96,97,],[-55,-36,75,-47,-51,-56,-57,-54,75,-55,-46,-50,-37,-58,]),'MINUS':([49,51,52,53,54,55,56,81,90,91,92,93,96,97,],[-55,-36,76,-47,-51,-56,-57,-54,76,-55,-46,-50,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarationList':([0,],[2,]),'declaration':([0,2,],[3,9,]),'varDeclaration':([0,2,30,],[4,4,33,]),'funDeclaration':([0,2,],[5,5,]),'typeSpecifier':([0,2,13,23,30,],[6,6,15,15,35,]),'params':([13,],[16,]),'paramList':([13,],[17,]),'param':([13,23,],[19,28,]),'compoundStmt':([22,32,94,95,102,],[26,39,39,39,39,]),'localDeclarations':([27,],[30,]),'empty':([27,30,66,],[31,34,88,]),'statementList':([30,],[32,]),'statement':([32,94,95,102,],[37,99,100,103,]),'expressionStmt':([32,94,95,102,],[38,38,38,38,]),'selectionStmt':([32,94,95,102,],[40,40,40,40,]),'iterationStmt':([32,94,95,102,],[41,41,41,41,]),'returnStmt':([32,94,95,102,],[42,42,42,42,]),'expression':([32,46,48,59,61,64,65,66,94,95,98,102,],[43,60,63,80,82,84,85,89,43,43,101,43,]),'var':([32,46,48,59,61,64,65,66,67,68,77,94,95,98,102,],[49,49,49,49,49,49,49,49,91,91,91,49,49,49,49,]),'simpleExpression':([32,46,48,59,61,64,65,66,94,95,98,102,],[50,50,50,50,50,50,50,50,50,50,50,50,]),'additiveExpression':([32,46,48,59,61,64,65,66,67,94,95,98,102,],[52,52,52,52,52,52,52,52,90,52,52,52,52,]),'term':([32,46,48,59,61,64,65,66,67,68,94,95,98,102,],[53,53,53,53,53,53,53,53,53,92,53,53,53,53,]),'factor':([32,46,48,59,61,64,65,66,67,68,77,94,95,98,102,],[54,54,54,54,54,54,54,54,54,54,93,54,54,54,54,]),'call':([32,46,48,59,61,64,65,66,67,68,77,94,95,98,102,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'relop':([52,],[67,]),'addop':([52,90,],[68,68,]),'mulop':([53,92,],[77,77,]),'args':([66,],[86,]),'argList':([66,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarationList','program',1,'p_program','parser.py',16),
  ('declarationList -> declarationList declaration','declarationList',2,'p_declarationList1','parser.py',21),
  ('declarationList -> declaration','declarationList',1,'p_declarationList2','parser.py',26),
  ('declaration -> varDeclaration','declaration',1,'p_declaration1','parser.py',31),
  ('declaration -> funDeclaration','declaration',1,'p_declaration2','parser.py',37),
  ('varDeclaration -> typeSpecifier ID SEMICOLON','varDeclaration',3,'p_varDeclaration1','parser.py',43),
  ('varDeclaration -> typeSpecifier ID LBRACKET NUMBER RBRACKET SEMICOLON','varDeclaration',6,'p_varDeclaration2','parser.py',48),
  ('typeSpecifier -> INT','typeSpecifier',1,'p_typeSpecifier1','parser.py',53),
  ('typeSpecifier -> VOID','typeSpecifier',1,'p_typeSpecifier2','parser.py',58),
  ('funDeclaration -> typeSpecifier ID LPARENT params RPARENT compoundStmt','funDeclaration',6,'p_funDeclaration','parser.py',63),
  ('params -> paramList','params',1,'p_params1','parser.py',69),
  ('params -> VOID','params',1,'p_params2','parser.py',75),
  ('paramList -> paramList COMMA param','paramList',3,'p_paramList1','parser.py',81),
  ('paramList -> param','paramList',1,'p_paramList2','parser.py',86),
  ('param -> typeSpecifier ID','param',2,'p_param1','parser.py',92),
  ('param -> typeSpecifier ID LBRACKET RBRACKET','param',4,'p_param2','parser.py',98),
  ('compoundStmt -> LBRACE localDeclarations statementList RBRACE','compoundStmt',4,'p_compoundStmt','parser.py',104),
  ('localDeclarations -> localDeclarations varDeclaration','localDeclarations',2,'p_localDeclarations1','parser.py',110),
  ('localDeclarations -> empty','localDeclarations',1,'p_localDeclarations2','parser.py',116),
  ('statementList -> statementList statement','statementList',2,'p_statementList1','parser.py',122),
  ('statementList -> empty','statementList',1,'p_statementList2','parser.py',128),
  ('statement -> expressionStmt','statement',1,'p_statement1','parser.py',134),
  ('statement -> compoundStmt','statement',1,'p_statement2','parser.py',140),
  ('statement -> selectionStmt','statement',1,'p_statement3','parser.py',145),
  ('statement -> iterationStmt','statement',1,'p_statement4','parser.py',150),
  ('statement -> returnStmt','statement',1,'p_statement5','parser.py',155),
  ('expressionStmt -> expression SEMICOLON','expressionStmt',2,'p_expressionStmt1','parser.py',161),
  ('expressionStmt -> SEMICOLON','expressionStmt',1,'p_expressionStmt2','parser.py',167),
  ('selectionStmt -> IF LPARENT expression RPARENT statement','selectionStmt',5,'p_selectionStmt1','parser.py',173),
  ('selectionStmt -> IF LPARENT expression RPARENT statement ELSE statement','selectionStmt',7,'p_selectionStmt2','parser.py',178),
  ('iterationStmt -> WHILE LPARENT expression RPARENT statement','iterationStmt',5,'p_iterationStmt','parser.py',184),
  ('returnStmt -> RETURN SEMICOLON','returnStmt',2,'p_returnStmt1','parser.py',190),
  ('returnStmt -> RETURN expression SEMICOLON','returnStmt',3,'p_returnStmt2','parser.py',196),
  ('expression -> var ASSIGN expression','expression',3,'p_expression1','parser.py',202),
  ('expression -> simpleExpression','expression',1,'p_expression2','parser.py',208),
  ('var -> ID','var',1,'p_var1','parser.py',214),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var2','parser.py',220),
  ('simpleExpression -> additiveExpression relop additiveExpression','simpleExpression',3,'p_simpleExpression1','parser.py',226),
  ('simpleExpression -> additiveExpression','simpleExpression',1,'p_simpleExpression2','parser.py',232),
  ('relop -> LEQ','relop',1,'p_relop1','parser.py',238),
  ('relop -> LT','relop',1,'p_relop2','parser.py',244),
  ('relop -> GT','relop',1,'p_relop3','parser.py',250),
  ('relop -> GEQ','relop',1,'p_relop4','parser.py',256),
  ('relop -> EQ','relop',1,'p_relop5','parser.py',262),
  ('relop -> NEQ','relop',1,'p_relop6','parser.py',268),
  ('additiveExpression -> additiveExpression addop term','additiveExpression',3,'p_additiveExpression1','parser.py',274),
  ('additiveExpression -> term','additiveExpression',1,'p_additiveExpression2','parser.py',280),
  ('addop -> PLUS','addop',1,'p_addop1','parser.py',286),
  ('addop -> MINUS','addop',1,'p_addop2','parser.py',292),
  ('term -> term mulop factor','term',3,'p_term1','parser.py',298),
  ('term -> factor','term',1,'p_term2','parser.py',304),
  ('mulop -> TIMES','mulop',1,'p_mulop1','parser.py',310),
  ('mulop -> DIVIDE','mulop',1,'p_mulop2','parser.py',316),
  ('factor -> LPARENT expression RPARENT','factor',3,'p_factor1','parser.py',322),
  ('factor -> var','factor',1,'p_factor2','parser.py',328),
  ('factor -> call','factor',1,'p_factor3','parser.py',334),
  ('factor -> NUMBER','factor',1,'p_factor4','parser.py',340),
  ('call -> ID LPARENT args RPARENT','call',4,'p_call','parser.py',347),
  ('args -> argList','args',1,'p_args1','parser.py',353),
  ('args -> empty','args',1,'p_args2','parser.py',359),
  ('argList -> argList COMMA expression','argList',3,'p_argList1','parser.py',365),
  ('argList -> expression','argList',1,'p_argList2','parser.py',371),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',377),
]
